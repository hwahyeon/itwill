cat(codelist[i])
}
length(codelist)
for (i in length(codelist)){
cat([i])
}
for (i in length(codelist)){
cat(i)
}
for (i in 3){
cat(i)
}
for (i in 1:3){
cat(i)
}
for (i in 1:length(codelist)){
cat(i)
}
length(codelist)
for (i in 1:length(codelist)){
cat(codelist[1].KS)
}
for (i in 1:length(codelist)){
cat(codelist[1], '.KS')
}
for (i in 1:length(codelist)){
cat(codelist[1], '.KS'/n)
}
for (i in 1:length(codelist)){
cat(codelist[1], '.KS/n')
}
for (i in 1:length(codelist)){
cat(codelist[1], '.KS' \n)
}
for (i in 1:length(codelist)){
<- cat(codelist[i], '.KS')
}
for (i in 1:length(codelist)){
cat(codelist[i], '.KS')
}
ss <- tq_get("251270.KS")
ss
for (i in 1:length(codelist)){
ks <- cat(codelist[i], '.KS')
st <- tq-get(ks)
print(st)
}
for (i in 1:length(codelist)){
ks <- cat(codelist[i], '.KS')
st <- tq_get(ks)
print(st)
}
for (i in 1:length(codelist)){
ks <- cat(codelist[i], '.KS'),
st <- tq_get(ks),
print(st)
}
for (i in 1:length(codelist)){
ks <- cat(codelist[i], '.KS'),
}
for (i in 1:length(codelist)){
cat(codelist[i], '.KS'),
}
for (i in 1:length(codelist)){
cat(codelist[i], '.KS')
}
cat(codelist[1], '.KS')
cat(codelist[1],'.KS')
ssss<- cat(codelist[1],'.KS')
ss <- tq_get(ssss)
ss
ssss<- print(codelist[1],'.KS')
c(a*10)
c
c(a*10)
c('a'*10)
c
c('a')
c
c('a')
c('a'*12)
c('a':10)
c(10, times=10)
c
aa <- c(10, times=10)
aa
aa <- c('a', times=10)
aa
aa <- c(1:1, times=10)
aa
aa <- rep('a', times=10)
aa
code
codelist
aa <- rep('.KS', times=798)
aa
ksr <- rep('.KS', times=798) # .KS 문자열 벡터
ksr
ksr <- rep('KS', times=798) # .KS 문자열 벡터
ksr <- rep('KS', times=798) # .KS 문자열 벡터
ksr
codelist
pcode <- str_c(codelist, ksr, sep = '.')
library(stringr)
ksr <- rep('KS', times=798) # .KS 문자열 벡터
ksr
pcode <- str_c(codelist, ksr, sep = '.')
pcode
pcode[1]
for (i in 1:length(codelist)){
pcode[i]
}
for (i in 1:length(codelist)){
cat(pcode[i])
}
for (i in 1:length(codelist)){
cat(tq_get(pcode[i]))
}
for (i in 1:length(codelist)){
(tq_get(pcode[i]))
}
sss<- for (i in 1:length(codelist)){
(tq_get(pcode[i]))
}
sss
i=5
aaaaa<- tq_get(pcode[i])
aaaaa
i=5
aaaaa<- tq_get(pcode[i])
aaaaa
pcode[1]
i=5
aaaaa<- tq_get(pcode[i])
aaaaa
aaaaa<- tq_get(pcode[1])
aaaaa
tq_get(pcode[1])
pcode[1]
aaaaa<- tq_get("095570.KS")
aaaaa
ss <- tq_get("251270.KS")
ss
aaaaa<- tq_get(pcode[5])
aaaaa
pcode[5]
sss<- for (i in 1:length(codelist)){
(tq_get(pcode[i]))
}
sss
str(sss)
sss<- for (i in 1:2){
(tq_get(pcode[i]))
}
sss
sss<- for (i in 1:2){
return(tq_get(pcode[i]))
}
sss
(tq_get(pcode[i])
(tq_get(pcode[i])
aaa <- (tq_get(pcode[i])
sss<- for (i in 1:2){
result = (tq_get(pcode[i]))
print(result)
}
sss
sss<- for (i in 1:2){
result = (tq_get(pcode[i]))
print(result)
return
}
sss
sss<- for (i in 1:2){
result = (tq_get(pcode[i]))
print(result)
return()
}
sss
sss<- for (i in 1:2){
result = (tq_get(pcode[i]))
print(result)
return(list(result))
}
sss
sss<- for (i in 1:2){
result = (tq_get(pcode[i]))
print(result)
}
sss
sss<- for (i in 1:3){
result = (tq_get(pcode[i]))
print(result)
}
sss
str(sss)
asd<- for (i in 1:3){
result = (tq_get(pcode[i]))
print(result)
}
asd
empty_list = list()
empty_list
empty_list = list() #빈 리스트
empty_list
str(empty_list)
for (i in 1:3){
result = (tq_get(pcode[i]))
empty_list <- result
}
empty_list
empty_list = list() #빈 리스트
for (i in 1:3){
result = (tq_get(pcode[i]))
empty_list <- empty_list + result
}
empty_list
emptyl = list() #빈 리스트
emptyl
str(emptyl)
emptyl = list('') #빈 리스트
emptyl
emptyl = list() #빈 리스트
emptyl
str(emptyl)
for (i in 1:3){
result = (tq_get(pcode[i]))
emptyl <- emptyl + result
}
emptyl
for (i in 1:3){
result = (tq_get(pcode[i]))
emptyl = emptyl + result
}
emptyl = list('') #빈 리스트
emptyl
str(emptyl)
for (i in 1:3){
result = (tq_get(pcode[i]))
emptyl = emptyl + result
}
for (i in 1:3){
result = (tq_get(pcode[i]))
reulst_list <- as.list(result)
emptyl = emptyl + reulst_list
}
result = (tq_get(pcode[1]))
str(result)
result_test = (tq_get(pcode[1]))
str(result_test) #data.frame
as.list(result_test)
str(result_test) #data.frame
result = (tq_get(pcode[i]))
result
result[2,3,4]
result = (tq_get(pcode[i]))
result[2,3,4]
result[,,1]
result[,1]
result[,2]
result[,(3,4)]
result[,(3:4)]
result[,c(2,3,6)]
for (i in 1:3){
result = (tq_get(pcode[i])) #지금 이것의 결과는 data.frame
result2 <- result[,c(2,3,6)]
}
for (i in 1:3){
result = (tq_get(pcode[i])) #지금 이것의 결과는 data.frame
result2 <- result[,c(2,3,6)]
}
for (i in 1:3){
result = (tq_get(pcode[i])) #지금 이것의 결과는 data.frame
result2 <- result[,c(2,3,6)]
print(result2)
}
str(result2)
for (i in 1:3){
result = (tq_get(pcode[i])) #지금 이것의 결과는 data.frame
result2 <- result[,c(2,3,6)] #data.frame
emptyl[i] <-  result2  #이 리절트2를 이름을 코드번호로 해서 새로운 리스트에 추가하기.
}
emptyl
result2
stock3 <- data.frame(data=c('2000-05-08','2000-05-09','2000-05-10','2000-05-11','2000-05-12','2000-05-13','2000-05-14'),
dist=c(25, 25, 20, 29, 30, 48, 30),
kmh=c(19, 23, 20, 17, 18, 15, 14),
typ_siz=c(3, 2, 3, 3, 3, 2, 1))
stock3
x.size <- vector()
for (i in 1:2){
mid <- as.data.frame(ES[i]) #리스트를 데이터프레임으로 변환
fin <- as.vector(as.matrix(mid[2])) # 데이터프레임중 dist 값을 벡터로 변환
y.dist <- c(y.dist, fin) #모든 dist값 벡터로 변경
mid <- as.data.frame(ES[i]) #리스트를 데이터프레임으로 변환
fin <- as.vector(as.matrix(mid[3])) # 데이터프레임중 km값을 벡터로 변환
x.km <- c(x.km, fin) #모든 dist값 벡터로 변경
}
ES <- list(stock1, stock2, stock3) #예시 리스트
stock1 <- data.frame(data=c('2000-05-01','2000-05-02','2000-05-03','2000-05-04','2000-05-05','2000-05-06','2000-05-07'),
dist=c(25, 25, 30, 29, 40, 28, 30),
kmh=c(20, 19, 18, 17, 16, 15, 14),
typ_siz=c(1, 2, 3, 2, 3, 1, 2)) #태풍 크기 팩터형이여도 크기에 따라 숫자를 둘 수 있으니까.
stock2 <- data.frame(data=c('2000-05-08','2000-05-09','2000-05-10','2000-05-11','2000-05-12','2000-05-13','2000-05-14'),
dist=c(25, 25, 20, 29, 30, 48, 30),
kmh=c(19, 20, 20, 17, 16, 15, 14),
typ_siz=c(3, 2, 1, 2, 3, 2, 3))
stock3 <- data.frame(data=c('2000-05-08','2000-05-09','2000-05-10','2000-05-11','2000-05-12','2000-05-13','2000-05-14'),
dist=c(25, 25, 20, 29, 30, 48, 30),
kmh=c(19, 23, 20, 17, 18, 15, 14),
typ_siz=c(3, 2, 3, 3, 3, 2, 1))
ES <- list(stock1, stock2, stock3) #예시 리스트
ES
y.dist <- vector() # 0 vector 준비
x.km <- vector()
x.size <- vector()
for (i in 1:2){
mid <- as.data.frame(ES[i]) #리스트를 데이터프레임으로 변환
fin <- as.vector(as.matrix(mid[2])) # 데이터프레임중 dist 값을 벡터로 변환
y.dist <- c(y.dist, fin) #모든 dist값 벡터로 변경
mid <- as.data.frame(ES[i]) #리스트를 데이터프레임으로 변환
fin <- as.vector(as.matrix(mid[3])) # 데이터프레임중 km값을 벡터로 변환
x.km <- c(x.km, fin) #모든 dist값 벡터로 변경
}
x.km
y.dist
for (i in 1:2){
mid <- as.data.frame(ES[i]) #리스트를 데이터프레임으로 변환
fin <- as.vector(as.matrix(mid[2])) # 데이터프레임중 dist 값을 벡터로 변환
y.dist <- c(y.dist, fin) #모든 dist값 벡터로 변경
mid <- as.data.frame(ES[i])
fin <- as.vector(as.matrix(mid[3])) # 데이터프레임중 km값을 벡터로 변환
x.km <- c(x.km, fin) #모든 dist값 벡터로 변경
mid <- as.data.frame(ES[i])
fin <- as.vector(as.matrix(mid[4])) # 데이터프레임중 size값을 벡터로 변환
x.size <- c(x.size, fin) #모든 dist값 벡터로 변경
}
x.km
y.dist
y.dist <- vector() # 0 vector 준비
x.km <- vector()
x.size <- vector()
for (i in 1:2){
mid <- as.data.frame(ES[i]) #리스트를 데이터프레임으로 변환
fin <- as.vector(as.matrix(mid[2])) # 데이터프레임중 dist 값을 벡터로 변환
y.dist <- c(y.dist, fin) #모든 dist값 벡터로 변경
mid <- as.data.frame(ES[i])
fin <- as.vector(as.matrix(mid[3])) # 데이터프레임중 km값을 벡터로 변환
x.km <- c(x.km, fin) #모든 dist값 벡터로 변경
mid <- as.data.frame(ES[i])
fin <- as.vector(as.matrix(mid[4])) # 데이터프레임중 size값을 벡터로 변환
x.size <- c(x.size, fin) #모든 dist값 벡터로 변경
}
x.km
y.dist
x.size
#다중회귀분석
df <- data.frame(x.km, x.size, y.dist)
df
y <- y.dist
x1 <- x.km
x2 <- x.size
#다중회귀분석
df <- data.frame(x1, x2, y)
df
result.lm <- lm(formula=y ~ x1 + x2, data=df)
result.lm <- lm(formula=y ~ ., data=df)
result.lm
b <-
a1 <-
a2 <-
head(df)
head(df)
result.lm$x1
result.lm(x1)
as.matrix(result.lm)
as.numeric(result.lm)
as.matrix(result.lm)
as.vector(as.matrix(result.lm))
result.lm(1)
result.lm(x1)
result.lm(:3)
result.lm(1)
result.lm[1]
result.lm[2]
result.lm[3]
result.lm[4]
result.lm[,1]
result.lm[,`1]
result.lm[-1,]
result.lm[-1,]
zz
z
z
z
z
result.lm[1]
library(arules)
# transactions 데이터 가져오기
data("Groceries")  # 식료품점 데이터 로딩
str(Groceries) # Formal class 'transactions' [package "arules"] with 4 slots
Groceries
# [data.frame 형 변환]
Groceries.df<- as(Groceries, "data.frame")
head(Groceries.df)
summary(Groceries.df)
element(itemset/transcation)
rules <- apriori(Groceries, parameter=list(supp=0.001, conf=0.8))
inspect(rules)
# 규칙을 구성하는 왼쪽(LHS) -> 오른쪽(RHS)의 item 빈도수 보기
plot(rules, method="grouped")
summary(Groceries)
itemFrequencyPlot(Groceries, topN=20, type="absolute") # 상위 20개 토픽
library(arulesViz) # rules값 대상 그래프를 그리는 패키지
# read.transactions(),  apriori(), Adult 데이터셋 제공
library(arules) #read.transactions()함수 제공
itemFrequencyPlot(Groceries, topN=20, type="absolute") # 상위 20개 토픽
rules <- apriori(Groceries, parameter=list(supp=0.001, conf=0.8))
inspect(rules)
itemFrequencyPlot(Groceries, topN=20, type="absolute") # 상위 20개 토픽
library(arules)
itemFrequencyPlot(Groceries, topN=20, type="absolute") # 상위 20개 토픽
rules <- apriori(Groceries, parameter=list(supp=0.001, conf=0.8))
# 규칙을 구성하는 왼쪽(LHS) -> 오른쪽(RHS)의 item 빈도수 보기
plot(rules, method="grouped")
rules
library(arulesViz) # rules값 대상 그래프를 그리는 패키지
# confidence(신뢰도) 기준 내림차순으로 규칙 정렬
rules <- sort(rules, decreasing=T, by="confidence")
inspect(rules)
plot(rules, method="graph", control=list(type="items"))
inspect(rules)
inspect(rules) #즉, 신뢰도가 가장 높은 룰부터 보여줌.
head(inspect(rules))
plot(rules, method="graph", control=list(type="items"))
# 최대 길이 3이내로 규칙 생성
rules <- apriori(Groceries, parameter=list(supp=0.001, conf=0.80, maxlen=3))
rules #set of 410 rules
inspect(rules) # 29개 규칙
# confidence(신뢰도)를 기준 내림차순으로 규칙 정렬
rules <- sort(rules, decreasing=T, by="confidence") #by="기준이 되는 값"
inspect(rules) #즉, 신뢰도가 가장 높은 룰부터 보여줌.
plot(rules, method="graph", control=list(type="items"))
# 오른쪽 item이 전지분유(whole milk)인 규칙만 서브셋으로 작성
wmilk <- subset(rules, rhs %in% 'whole milk') # lhs : 왼쪽 item
# rhs 후행사건
wmilk # set of 18 rules
inspect(wmilk)
plot(wmilk, method="graph") #  연관 네트워크 그래프
# 오른쪽 item이 other vegetables인 규칙만 서브셋으로 작성
oveg <- subset(rules, rhs %in% 'other vegetables') # lhs : 왼쪽 item
oveg # set of 10 rules
inspect(oveg)
plot(oveg, method="graph") #  연관 네트워크 그래프
# 왼쪽 item 'butter', 'yogurt'
but_yog <- subset(rules, lhs %in% c('butter', 'yogurt')) #두 아이템을 포함하는 선행사건
but_yog
str(but_yog)
inspect(but_yog)
#두 아이템을 포함(or, 둘중에 하나 포함)하는 선행사건
but_yog
plot(but_yog, method="graph")
# 단계1: 최소 support=0.5, 최소 confidence=0.9를 지정하여 연관규칙 생성
data(Adult)
library(arulesViz)
c1 <- c(5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5) #떨어지다가 오르는 것
c2 <- c(5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5) #태풍이 와도 계속 떨어지는 것
c3 <- c(-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5) #태풍이 와도 계속 오르는 것
c4 <- c(-5, -4, -3, -2, -1, 0, -1, -2, -3, -4, -5)
c5 <- c(-2, -3, -3, -2, -1, 0, -1, 0, 1, 2, 1)
plot(c5, type = "b")
plot(c1, type = "b")
abline(v=6, lty=2) #세로줄
plot(c1, type = "b", abline(v=6, lty=2))
ggplot(data = mpg, aes(x = displ, y = hwy))
library(ggplot)
ggplot(data = mpg, aes(x = displ, y = hwy))
library(ggplot2)
ggplot(data = mpg, aes(x = displ, y = hwy))
plot(c1, type = "b")
ggplot(data = mpg, aes(x = displ, y = hwy))
ggplot(c1, type = "b")
ggplot(data = mpg, aes(x = displ, y = hwy)) + c1
ggplot(data = mpg, aes(x = displ, y = hwy)) + c1
ggplot(data = mpg, aes(x = displ, y = hwy)) + plot(c1, type = "b")
ggplot(data = mpg, aes(x = displ, y = hwy)) +  geom_point(c1, type = "b")
ggplot(data = mpg, aes(x = displ, y = hwy)) +  geom_point()
ggplot(data = c1, aes(x = displ, y = hwy)) +  geom_point()
c1 <- c(5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5) #떨어지다가 오르는 것
c2 <- c(5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5) #태풍이 와도 계속 떨어지는 것
c3 <- c(-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5) #태풍이 와도 계속 오르는 것
c4 <- c(-5, -4, -3, -2, -1, 0, -1, -2, -3, -4, -5)
c5 <- c(-2, -3, -3, -2, -1, 0, -1, 0, 1, 2, 1)
library(ggplot2)
ggplot(data = c1, aes(x = displ, y = hwy)) +  geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy))
geom_point()
plot(c1, type = "b")
ggplot(c1, type = "b")
ggplot(c1, type = "b")
abline(v=6, lty=2) #세로줄
ggplot(c1, type = "b")
ggplot(c1, type = "b")
ggplot(c2, type = "b")
plot(c2, type = "b")
plot(c1, type = "b")
plot(c2, type = "b")
plot(c3, type = "b")
plot(c4, type = "b")
plot(c5, type = "b")
